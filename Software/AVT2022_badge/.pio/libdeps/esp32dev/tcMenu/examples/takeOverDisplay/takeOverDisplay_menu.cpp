/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "takeOverDisplay_menu.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Take Over Display", "40722ec4-e8bc-4889-b54e-d81b14cb429c" };
TcMenuRemoteServer remoteServer(applicationInfo);
I2cAt24Eeprom glI2cRom(0x50, PAGESIZE_AT24C128);
EepromAuthenticatorManager authManager(6);
LiquidCrystal lcd(8, 9, 10, 11, 12, 13);
LiquidCrystalRenderer renderer(lcd, 20, 4);
EthernetServer server(3333);
EthernetInitialisation ethernetInitialisation(&server);
EthernetTagValTransport ethernetTransport;
TagValueRemoteServerConnection ethernetConnection(ethernetTransport, ethernetInitialisation);
NoInitialisationNeeded serialInitializer;
SerialTagValueTransport serialTransport(&Serial);
TagValueRemoteServerConnection serialConnection(serialTransport, serialInitializer);

// Global Menu Item declarations
const PROGMEM char pgmStrConnectivityAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuConnectivityAuthenticator(pgmStrConnectivityAuthenticatorText, NO_CALLBACK, 20, NULL);
const PROGMEM char pgmStrConnectivityIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuConnectivityIoTMonitor(pgmStrConnectivityIoTMonitorText, 19, &menuConnectivityAuthenticator);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityIPAddressRtCall, ipAddressRenderFn, "IPAddress", 7, NO_CALLBACK)
IpAddressMenuItem menuConnectivityIPAddress(fnConnectivityIPAddressRtCall, 12, &menuConnectivityIoTMonitor);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityChangePinRtCall, textItemRenderFn, "ChangePin", -1, onChangePin)
TextMenuItem menuConnectivityChangePin(fnConnectivityChangePinRtCall, 14, 15, &menuConnectivityIPAddress);
RENDERING_CALLBACK_NAME_INVOKE(fnConnectivityRtCall, backSubItemRenderFn, "Connectivity", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(fnConnectivityRtCall, &menuConnectivityChangePin);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsDateRtCall, dateItemRenderFn, "Date", -1, NO_CALLBACK)
DateFormattedMenuItem menuSettingsDate(fnSettingsDateRtCall, 18, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsTimeRtCall, timeItemRenderFn, "Time", -1, NO_CALLBACK)
TimeFormattedMenuItem menuSettingsTime(fnSettingsTimeRtCall, 17, (MultiEditWireType)3, &menuSettingsDate);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsNum6x4RtCall, largeNumItemRenderFn, "Num6x4", -1, NO_CALLBACK)
EditableLargeNumberMenuItem menuSettingsNum6x4(fnSettingsNum6x4RtCall, 16, 10, 4, true, &menuSettingsTime);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsPositiveIntsRtCall, largeNumItemRenderFn, "PositiveInts", -1, NO_CALLBACK)
EditableLargeNumberMenuItem menuSettingsPositiveInts(fnSettingsPositiveIntsRtCall, 15, 9, 0, false, &menuSettingsNum6x4);
const PROGMEM AnyMenuInfo minfoSettingsSaveSettings = { "Save Settings", 6, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSettingsSaveSettings(&minfoSettingsSaveSettings, &menuSettingsPositiveInts);
const PROGMEM AnalogMenuInfo minfoSettingsPower = { "Power", 5, 5, 250, NO_CALLBACK, 0, 10, "W" };
AnalogMenuItem menuSettingsPower(&minfoSettingsPower, 0, &menuSettingsSaveSettings);
const PROGMEM BooleanMenuInfo minfoSettingsEnabled = { "Enabled", 4, 2, 1, NO_CALLBACK, NAMING_TRUE_FALSE };
BooleanMenuItem menuSettingsEnabled(&minfoSettingsEnabled, false, &menuSettingsPower);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsEnabled);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuConnectivity);
const PROGMEM AnyMenuInfo minfoQuestionDialog = { "Question Dialog", 9, 0xffff, 0, onQuestionDlg };
ActionMenuItem menuQuestionDialog(&minfoQuestionDialog, &menuSettings);
const PROGMEM AnyMenuInfo minfoInfoDialog = { "Info Dialog", 8, 0xffff, 0, onInfoDlg };
ActionMenuItem menuInfoDialog(&minfoInfoDialog, &menuQuestionDialog);
RENDERING_CALLBACK_NAME_INVOKE(fnTextRtCall, textItemRenderFn, "Text", -1, NO_CALLBACK)
TextMenuItem menuText(fnTextRtCall, 7, 10, &menuInfoDialog);
const char enumStrFood_0[] PROGMEM = "Pizza";
const char enumStrFood_1[] PROGMEM = "Pasta";
const char enumStrFood_2[] PROGMEM = "Salad";
const char* const enumStrFood[] PROGMEM  = { enumStrFood_0, enumStrFood_1, enumStrFood_2 };
const PROGMEM EnumMenuInfo minfoFood = { "Food", 2, 3, 2, onFoodChoice, enumStrFood };
EnumMenuItem menuFood(&minfoFood, 0, &menuText);
const PROGMEM AnyMenuInfo minfoTakeDisplay = { "Take Display", 1, 0xffff, 0, onTakeOverDisplay };
ActionMenuItem menuTakeDisplay(&minfoTakeDisplay, &menuFood);
RENDERING_CALLBACK_NAME_INVOKE(fnTimeRtCall, timeItemRenderFn, "Time", -1, NO_CALLBACK)
TimeFormattedMenuItem menuTime(fnTimeRtCall, 13, (MultiEditWireType)3, &menuTakeDisplay);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glI2cRom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 100);
    menuMgr.setAuthenticator(&authManager);
    // Now add any readonly, non-remote and visible flags.
    menuText.setReadOnly(true);
    menuSettingsSaveSettings.setLocalOnly(true);
    menuConnectivity.setLocalOnly(true);
    menuInfoDialog.setLocalOnly(true);
    menuConnectivity.setSecured(true);

    // Code generated by plugins.
    lcd.setIoAbstraction(io23017);
    lcd.begin(20, 4);
    renderer.setUpdatesPerSecond(5);
    switches.init(io23017, SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuTime, 6, 7, 5);
    remoteServer.addConnection(&ethernetConnection);
    remoteServer.addConnection(&serialConnection);

    // We have an IoT monitor, register the server
    menuConnectivityIoTMonitor.setRemoteServer(remoteServer);

    // We have an EEPROM authenticator, it needs initialising
    menuConnectivityAuthenticator.init();
}

