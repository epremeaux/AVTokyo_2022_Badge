/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "AVT2022_badge_menu.h"
#include "ThemeDarkModeTraditional.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "AVTokyo 2022", "670e39bd-6da9-488e-b760-b356d94bca8b" };

TFT_eSPI gfx;
TfteSpiDrawable gfxDrawable(&gfx, 0);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoAbout = { "About", 990, 0xffff, 0, about };
ActionMenuItem menuAbout(&minfoAbout, NULL);
const PROGMEM AnyMenuInfo minfoSensorsPlotSensorsPlotIMU = { "Plot IMU", 453, 0xffff, 0, PlotIMU };
ActionMenuItem menuSensorsPlotSensorsPlotIMU(&minfoSensorsPlotSensorsPlotIMU, NULL);
const PROGMEM AnyMenuInfo minfoSensorsPlotSensorsPlotHumidity = { "Plot Humidity", 452, 0xffff, 0, PlotHumidity };
ActionMenuItem menuSensorsPlotSensorsPlotHumidity(&minfoSensorsPlotSensorsPlotHumidity, &menuSensorsPlotSensorsPlotIMU);
const PROGMEM AnyMenuInfo minfoSensorsPlotSensorsPlotTemperature = { "Plot Temperature", 451, 0xffff, 0, PlotTemperature };
ActionMenuItem menuSensorsPlotSensorsPlotTemperature(&minfoSensorsPlotSensorsPlotTemperature, &menuSensorsPlotSensorsPlotHumidity);
RENDERING_CALLBACK_NAME_INVOKE(fnSensorsPlotSensorsRtCall, backSubItemRenderFn, "Plot Sensors", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSensorsPlotSensors = { "Plot Sensors", 450, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSensorsPlotSensors(fnSensorsPlotSensorsRtCall, NULL);
SubMenuItem menuSensorsPlotSensors(&minfoSensorsPlotSensors, &menuBackSensorsPlotSensors, &menuSensorsPlotSensorsPlotTemperature);
const PROGMEM FloatMenuInfo minfoSensorsBatteryVoltage = { "Battery Voltage", 403, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuSensorsBatteryVoltage(&minfoSensorsBatteryVoltage, &menuSensorsPlotSensors);
const PROGMEM FloatMenuInfo minfoSensorsHumidity = { "Humidity", 402, 0xffff, 1, NO_CALLBACK };
FloatMenuItem menuSensorsHumidity(&minfoSensorsHumidity, &menuSensorsBatteryVoltage);
const PROGMEM FloatMenuInfo minfoSensorsTemperature = { "Temperature", 401, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuSensorsTemperature(&minfoSensorsTemperature, &menuSensorsHumidity);
RENDERING_CALLBACK_NAME_INVOKE(fnSensorsRtCall, backSubItemRenderFn, "Sensors", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSensors = { "Sensors", 400, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSensors(fnSensorsRtCall, &menuSensorsTemperature);
SubMenuItem menuSensors(&minfoSensors, &menuBackSensors, &menuAbout);
const PROGMEM AnyMenuInfo minfoToolsButtonTest = { "Button Test", 303, 0xffff, 0, LaunchButtonTest };
ActionMenuItem menuToolsButtonTest(&minfoToolsButtonTest, NULL);
const PROGMEM AnyMenuInfo minfoToolsBLEScanner = { "BLE Scanner", 302, 0xffff, 0, launchBLEScan };
ActionMenuItem menuToolsBLEScanner(&minfoToolsBLEScanner, &menuToolsButtonTest);
const PROGMEM AnyMenuInfo minfoToolsWiFiScanner = { "WiFi Scanner", 301, 0xffff, 0, LaunchWiFiScanner };
ActionMenuItem menuToolsWiFiScanner(&minfoToolsWiFiScanner, &menuToolsBLEScanner);
RENDERING_CALLBACK_NAME_INVOKE(fnToolsRtCall, backSubItemRenderFn, "Tools", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoTools = { "Tools", 300, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackTools(fnToolsRtCall, &menuToolsWiFiScanner);
SubMenuItem menuTools(&minfoTools, &menuBackTools, &menuSensors);
const PROGMEM AnyMenuInfo minfoGamesSnek = { "Snek", 203, 0xffff, 0, LaunchSnek };
ActionMenuItem menuGamesSnek(&minfoGamesSnek, NULL);
const PROGMEM AnyMenuInfo minfoGamesGameOfLife = { "Game of Life", 202, 0xffff, 0, LaunchGameOfLife };
ActionMenuItem menuGamesGameOfLife(&minfoGamesGameOfLife, &menuGamesSnek);
const PROGMEM AnyMenuInfo minfoGamesQuiz = { "Quiz", 201, 0xffff, 0, launchQuiz };
ActionMenuItem menuGamesQuiz(&minfoGamesQuiz, &menuGamesGameOfLife);
RENDERING_CALLBACK_NAME_INVOKE(fnGamesRtCall, backSubItemRenderFn, "Games", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoGames = { "Games", 200, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackGames(fnGamesRtCall, &menuGamesQuiz);
SubMenuItem menuGames(&minfoGames, &menuBackGames, &menuTools);
const PROGMEM AnyMenuInfo minfoSetupResetPreferences = { "Reset Preferences", 199, 0xffff, 0, ResetPreferences };
ActionMenuItem menuSetupResetPreferences(&minfoSetupResetPreferences, NULL);
const PROGMEM AnyMenuInfo minfoSetupMQTTSave = { "Save", 139, 0xffff, 0, saveMQTT };
ActionMenuItem menuSetupMQTTSave(&minfoSetupMQTTSave, NULL);
const char enumStrSetupMQTTStatus_0[] PROGMEM = "Not Avail";
const char enumStrSetupMQTTStatus_1[] PROGMEM = "Connected";
const char* const enumStrSetupMQTTStatus[] PROGMEM  = { enumStrSetupMQTTStatus_0, enumStrSetupMQTTStatus_1 };
const PROGMEM EnumMenuInfo minfoSetupMQTTStatus = { "Status", 135, 0xffff, 1, NO_CALLBACK, enumStrSetupMQTTStatus };
EnumMenuItem menuSetupMQTTStatus(&minfoSetupMQTTStatus, 0, &menuSetupMQTTSave);
const PROGMEM AnalogMenuInfo minfoSetupMQTTPostInterval = { "Post Interval", 134, 0xffff, 600, setMQTTPostInterval, 0, 1, "(S)" };
AnalogMenuItem menuSetupMQTTPostInterval(&minfoSetupMQTTPostInterval, 0, &menuSetupMQTTStatus);
const PROGMEM AnalogMenuInfo minfoSetupMQTTPort = { "Port", 133, 0xffff, 65535, setMQTTPort, 0, 1, "" };
AnalogMenuItem menuSetupMQTTPort(&minfoSetupMQTTPort, 0, &menuSetupMQTTPostInterval);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupMQTTBrokerRtCall, textItemRenderFn, "Broker", -1, setMQTTBroker)
TextMenuItem menuSetupMQTTBroker(fnSetupMQTTBrokerRtCall, 132, 45, &menuSetupMQTTPort);
const PROGMEM BooleanMenuInfo minfoSetupMQTTEnable = { "Enable", 131, 0xffff, 1, setMQTTEnable, NAMING_TRUE_FALSE };
BooleanMenuItem menuSetupMQTTEnable(&minfoSetupMQTTEnable, false, &menuSetupMQTTBroker);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupMQTTRtCall, backSubItemRenderFn, "MQTT", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSetupMQTT = { "MQTT", 130, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSetupMQTT(fnSetupMQTTRtCall, &menuSetupMQTTEnable);
SubMenuItem menuSetupMQTT(&minfoSetupMQTT, &menuBackSetupMQTT, &menuSetupResetPreferences);
const PROGMEM AnyMenuInfo minfoSetupWiFiSave = { "Save", 129, 0xffff, 0, saveWifi };
ActionMenuItem menuSetupWiFiSave(&minfoSetupWiFiSave, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupWiFiIPaddrRtCall, textItemRenderFn, "IPaddr", -1, NO_CALLBACK)
TextMenuItem menuSetupWiFiIPaddr(fnSetupWiFiIPaddrRtCall, 126, 15, &menuSetupWiFiSave);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupWiFiUUIDRtCall, textItemRenderFn, "UUID", -1, NO_CALLBACK)
TextMenuItem menuSetupWiFiUUID(fnSetupWiFiUUIDRtCall, 125, 7, &menuSetupWiFiIPaddr);
const char enumStrSetupWiFiStatus_0[] PROGMEM = "Not Avail";
const char enumStrSetupWiFiStatus_1[] PROGMEM = "Connected";
const char enumStrSetupWiFiStatus_2[] PROGMEM = "Trying...";
const char* const enumStrSetupWiFiStatus[] PROGMEM  = { enumStrSetupWiFiStatus_0, enumStrSetupWiFiStatus_1, enumStrSetupWiFiStatus_2 };
const PROGMEM EnumMenuInfo minfoSetupWiFiStatus = { "Status", 124, 0xffff, 2, NO_CALLBACK, enumStrSetupWiFiStatus };
EnumMenuItem menuSetupWiFiStatus(&minfoSetupWiFiStatus, 0, &menuSetupWiFiUUID);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupWiFiPasswordRtCall, textItemRenderFn, "PW", -1, setWiFiPassword)
TextMenuItem menuSetupWiFiPassword(fnSetupWiFiPasswordRtCall, 123, 32, &menuSetupWiFiStatus);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupWiFiSSIDRtCall, textItemRenderFn, "SSID", -1, setSSID)
TextMenuItem menuSetupWiFiSSID(fnSetupWiFiSSIDRtCall, 122, 32, &menuSetupWiFiPassword);
const PROGMEM BooleanMenuInfo minfoSetupWiFiEnableWiFi = { "Enable WiFi", 121, 0xffff, 1, setWiFiEnable, NAMING_TRUE_FALSE };
BooleanMenuItem menuSetupWiFiEnableWiFi(&minfoSetupWiFiEnableWiFi, false, &menuSetupWiFiSSID);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupWiFiRtCall, backSubItemRenderFn, "WiFi", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSetupWiFi = { "WiFi", 120, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSetupWiFi(fnSetupWiFiRtCall, &menuSetupWiFiEnableWiFi);
SubMenuItem menuSetupWiFi(&minfoSetupWiFi, &menuBackSetupWiFi, &menuSetupMQTT);
const PROGMEM AnyMenuInfo minfoSetupSave = { "Save", 109, 0xffff, 0, SetupSave };
ActionMenuItem menuSetupSave(&minfoSetupSave, &menuSetupWiFi);
const char enumStrSetupBadgeMode_0[] PROGMEM = "Normal";
const char enumStrSetupBadgeMode_1[] PROGMEM = "Name";
const char* const enumStrSetupBadgeMode[] PROGMEM  = { enumStrSetupBadgeMode_0, enumStrSetupBadgeMode_1 };
const PROGMEM EnumMenuInfo minfoSetupBadgeMode = { "Badge Mode", 103, 0xffff, 1, setBadgeMode, enumStrSetupBadgeMode };
EnumMenuItem menuSetupBadgeMode(&minfoSetupBadgeMode, 0, &menuSetupSave);
const char enumStrSetupBacklight_0[] PROGMEM = "10%";
const char enumStrSetupBacklight_1[] PROGMEM = "20%";
const char enumStrSetupBacklight_2[] PROGMEM = "30%";
const char enumStrSetupBacklight_3[] PROGMEM = "40%";
const char enumStrSetupBacklight_4[] PROGMEM = "50%";
const char enumStrSetupBacklight_5[] PROGMEM = "60%";
const char enumStrSetupBacklight_6[] PROGMEM = "70%";
const char enumStrSetupBacklight_7[] PROGMEM = "80%";
const char enumStrSetupBacklight_8[] PROGMEM = "90%";
const char enumStrSetupBacklight_9[] PROGMEM = "100%";
const char* const enumStrSetupBacklight[] PROGMEM  = { enumStrSetupBacklight_0, enumStrSetupBacklight_1, enumStrSetupBacklight_2, enumStrSetupBacklight_3, enumStrSetupBacklight_4, enumStrSetupBacklight_5, enumStrSetupBacklight_6, enumStrSetupBacklight_7, enumStrSetupBacklight_8, enumStrSetupBacklight_9 };
const PROGMEM EnumMenuInfo minfoSetupBacklight = { "Backlight", 102, 0xffff, 9, setBacklight, enumStrSetupBacklight };
EnumMenuItem menuSetupBacklight(&minfoSetupBacklight, 0, &menuSetupBadgeMode);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupNameRtCall, textItemRenderFn, "Name", -1, NO_CALLBACK)
TextMenuItem menuSetupName(fnSetupNameRtCall, 101, 15, &menuSetupBacklight);
RENDERING_CALLBACK_NAME_INVOKE(fnSetupRtCall, backSubItemRenderFn, "Setup", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSetup = { "Setup", 100, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSetup(fnSetupRtCall, &menuSetupName);
SubMenuItem menuSetup(&minfoSetup, &menuBackSetup, &menuGames);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).

    // Now add any readonly, non-remote and visible flags.
    menuSetupMQTTPort.setReadOnly(true);
    menuSensorsTemperature.setReadOnly(true);
    menuSetupWiFiIPaddr.setReadOnly(true);
    menuSensorsBatteryVoltage.setReadOnly(true);
    menuSetupMQTTStatus.setReadOnly(true);
    menuSetupWiFiUUID.setReadOnly(true);
    menuSensorsHumidity.setReadOnly(true);
    menuSetupWiFiStatus.setReadOnly(true);

    // Code generated by plugins.
    gfx.begin();
    gfx.setRotation(1);
    renderer.setUpdatesPerSecond(5);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForUpDownOk(&renderer, &menuSetup, 33, 34, 39);
    menuMgr.setBackButton(35);
    menuMgr.setNextButton(32);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    installDarkModeTraditionalTheme(renderer, MenuFontDef(nullptr, 4), MenuFontDef(nullptr, 4), true);
}

